<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="Stock-Code JAVA ruleset"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

  <!-- Reference : https://pmd.github.io/pmd-5.5.1/pmd-java/rules/index.html -->
  <description>vogleStyle - Java Rules, by PMD 5.5.1</description>

  <!--
      ** vogle style **

      PMD is very configurable. Be sure to read the documentation at
      http://pmd.github.io/pmd-5.5.1/index.html (or in your downloaded distribution).

      To completely disable a check, just comment it out or delete it from the file.

      Authors: Allan Im
  -->

  <!-- The Basic ruleset contains a collection of good practices which should be followed. -->
  <rule ref="rulesets/java/basic.xml/JumbledIncrementer"/>
  <rule ref="rulesets/java/basic.xml/ForLoopShouldBeWhileLoop"/>
  <rule ref="rulesets/java/basic.xml/OverrideBothEqualsAndHashcode"/>
  <rule ref="rulesets/java/basic.xml/DoubleCheckedLocking"/>
  <rule ref="rulesets/java/basic.xml/ReturnFromFinallyBlock"/>
  <rule ref="rulesets/java/basic.xml/UnconditionalIfStatement"/>
  <rule ref="rulesets/java/basic.xml/BooleanInstantiation"/>
  <rule ref="rulesets/java/basic.xml/CollapsibleIfStatements"/>
  <rule ref="rulesets/java/basic.xml/ClassCastExceptionWithToArray"/>
  <rule ref="rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
  <rule ref="rulesets/java/basic.xml/MisplacedNullCheck"/>
  <rule ref="rulesets/java/basic.xml/AvoidThreadGroup"/>
  <rule ref="rulesets/java/basic.xml/BrokenNullCheck"/>
  <rule ref="rulesets/java/basic.xml/BigIntegerInstantiation"/>
  <rule ref="rulesets/java/basic.xml/AvoidUsingOctalValues"/>
  <rule ref="rulesets/java/basic.xml/AvoidUsingHardCodedIP"/>
  <rule ref="rulesets/java/basic.xml/CheckResultSet"/>
  <rule ref="rulesets/java/basic.xml/AvoidMultipleUnaryOperators"/>
  <rule ref="rulesets/java/basic.xml/ExtendsObject"/>
  <rule ref="rulesets/java/basic.xml/CheckSkipResult"/>
  <rule ref="rulesets/java/basic.xml/AvoidBranchingStatementAsLastInLoop"/>
  <rule ref="rulesets/java/basic.xml/DontCallThreadRun"/>
  <rule ref="rulesets/java/basic.xml/DontUseFloatTypeForLoopIndices"/>
  <rule ref="rulesets/java/basic.xml/SimplifiedTernary"/>


  <!-- The Empty Code ruleset contains rules that find empty statements of any kind
  (empty method,empty block statement, empty try or catch block,â€¦).-->
  <!--<rule ref="rulesets/java/empty.xml/EmptyCatchBlock"/>-->
  <rule ref="rulesets/java/empty.xml/EmptyIfStmt"/>
  <rule ref="rulesets/java/empty.xml/EmptyWhileStmt"/>
  <rule ref="rulesets/java/empty.xml/EmptyTryBlock"/>
  <rule ref="rulesets/java/empty.xml/EmptyFinallyBlock"/>
  <rule ref="rulesets/java/empty.xml/EmptySwitchStatements"/>
  <rule ref="rulesets/java/empty.xml/EmptySynchronizedBlock"/>
  <rule ref="rulesets/java/empty.xml/EmptyStatementNotInLoop"/>
  <rule ref="rulesets/java/empty.xml/EmptyInitializer"/>
  <rule ref="rulesets/java/empty.xml/EmptyStatementBlock"/>
  <rule ref="rulesets/java/empty.xml/EmptyStaticInitializer"/>


  <!-- These rules deal with different problems that can occur with import statements. -->
  <rule ref="rulesets/java/imports.xml/DuplicateImports"/>
  <rule ref="rulesets/java/imports.xml/DontImportJavaLang"/>
  <rule ref="rulesets/java/imports.xml/UnusedImports"/>
  <rule ref="rulesets/java/imports.xml/ImportFromSamePackage"/>
  <!--<rule ref="rulesets/java/imports.xml/TooManyStaticImports"/>-->
  <rule ref="rulesets/java/imports.xml/UnnecessaryFullyQualifiedName"/>


  <!-- The Controversial ruleset contains rules that, for whatever reason, are considered controversial.
  They are held here to allow people to include them as they see fit within their custom rulesets.-->
  <rule ref="rulesets/java/controversial.xml/UnnecessaryConstructor"/>
  <rule ref="rulesets/java/controversial.xml/NullAssignment"/>
  <!--<rule ref="rulesets/java/controversial.xml/OnlyOneReturn"/>-->
  <rule ref="rulesets/java/controversial.xml/AssignmentInOperand"/>
  <!--<rule ref="rulesets/java/controversial.xml/AtLeastOneConstructor"/>-->
  <rule ref="rulesets/java/controversial.xml/DontImportSun"/>
  <rule ref="rulesets/java/controversial.xml/SuspiciousOctalEscape"/>
  <rule ref="rulesets/java/controversial.xml/CallSuperInConstructor"/>
  <rule ref="rulesets/java/controversial.xml/UnnecessaryParentheses"/>
  <rule ref="rulesets/java/controversial.xml/DefaultPackage"/>
  <!--<rule ref="rulesets/java/controversial.xml/DataflowAnomalyAnalysis"/>-->
  <rule ref="rulesets/java/controversial.xml/AvoidFinalLocalVariable"/>
  <rule ref="rulesets/java/controversial.xml/AvoidUsingShortType"/>
  <rule ref="rulesets/java/controversial.xml/AvoidUsingVolatile"/>
  <rule ref="rulesets/java/controversial.xml/AvoidUsingNativeCode"/>
  <rule ref="rulesets/java/controversial.xml/AvoidAccessibilityAlteration"/>
  <rule ref="rulesets/java/controversial.xml/DoNotCallGarbageCollectionExplicitly"/>
  <rule ref="rulesets/java/controversial.xml/OneDeclarationPerLine"/>
  <!--<rule ref="rulesets/java/controversial.xml/AvoidPrefixingMethodParameters"/>-->
  <!--<rule ref="rulesets/java/controversial.xml/AvoidLiteralsInIfCondition"/>-->
  <!--<rule ref="rulesets/java/controversial.xml/UseObjectForClearerAPI"/>-->
  <!--<rule ref="rulesets/java/controversial.xml/UseConcurrentHashMap"/>-->


  <!-- The Naming Ruleset contains rules regarding preferred usage of names and identifiers. -->
  <rule ref="rulesets/java/naming.xml/ShortVariable"/>
  <rule ref="rulesets/java/naming.xml/LongVariable">
    <properties>
      <property name="minimum" value="30"/>
    </properties>
  </rule>
  <rule ref="rulesets/java/naming.xml/ShortMethodName"/>
  <rule ref="rulesets/java/naming.xml/VariableNamingConventions"/>
  <rule ref="rulesets/java/naming.xml/MethodNamingConventions"/>
  <rule ref="rulesets/java/naming.xml/ClassNamingConventions"/>
  <rule ref="rulesets/java/naming.xml/AbstractNaming"/>
  <rule ref="rulesets/java/naming.xml/AvoidDollarSigns"/>
  <rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass"/>
  <rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName"/>
  <rule ref="rulesets/java/naming.xml/SuspiciousConstantFieldName"/>
  <rule ref="rulesets/java/naming.xml/SuspiciousEqualsMethodName"/>
  <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName"/>
  <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName"/>
  <rule ref="rulesets/java/naming.xml/NoPackage"/>
  <rule ref="rulesets/java/naming.xml/PackageCase"/>
  <rule ref="rulesets/java/naming.xml/MisleadingVariableName"/>
  <rule ref="rulesets/java/naming.xml/BooleanGetMethodName"/>
  <rule ref="rulesets/java/naming.xml/ShortClassName"/>
  <rule ref="rulesets/java/naming.xml/GenericsNaming"/>


  <!-- These rules deal with different issues that can arise with manipulation of the String, StringBuffer,
  or StringBuilder instances. -->
  <rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals"/>
  <rule ref="rulesets/java/strings.xml/StringInstantiation"/>
  <rule ref="rulesets/java/strings.xml/StringToString"/>
  <rule ref="rulesets/java/strings.xml/InefficientStringBuffering"/>
  <rule ref="rulesets/java/strings.xml/UnnecessaryCaseChange"/>
  <rule ref="rulesets/java/strings.xml/UseStringBufferLength"/>
  <rule ref="rulesets/java/strings.xml/AppendCharacterWithChar"/>
  <rule ref="rulesets/java/strings.xml/ConsecutiveAppendsShouldReuse"/>
  <rule ref="rulesets/java/strings.xml/ConsecutiveLiteralAppends"/>
  <rule ref="rulesets/java/strings.xml/UseIndexOfChar"/>
  <rule ref="rulesets/java/strings.xml/InefficientEmptyStringCheck"/>
  <rule ref="rulesets/java/strings.xml/InsufficientStringBufferDeclaration"/>
  <rule ref="rulesets/java/strings.xml/UselessStringValueOf"/>
  <rule ref="rulesets/java/strings.xml/StringBufferInstantiationWithChar"/>
  <rule ref="rulesets/java/strings.xml/UseEqualsToCompareStrings"/>
  <rule ref="rulesets/java/strings.xml/AvoidStringBufferField"/>


  <!-- The Design ruleset contains rules that flag suboptimal code implementations.
  Alternate approachesare suggested. -->
  <rule ref="rulesets/java/design.xml/UseUtilityClass"/>
  <rule ref="rulesets/java/design.xml/SimplifyBooleanReturns"/>
  <rule ref="rulesets/java/design.xml/SimplifyBooleanExpressions"/><!--OK-->
  <rule ref="rulesets/java/design.xml/SwitchStmtsShouldHaveDefault"/><!--OK-->
  <rule ref="rulesets/java/design.xml/AvoidDeeplyNestedIfStmts"/>
  <rule ref="rulesets/java/design.xml/AvoidReassigningParameters"/><!--OK-->
  <rule ref="rulesets/java/design.xml/SwitchDensity"/>
  <rule ref="rulesets/java/design.xml/ConstructorCallsOverridableMethod"/>
  <rule ref="rulesets/java/design.xml/AccessorClassGeneration"/>
  <rule ref="rulesets/java/design.xml/FinalFieldCouldBeStatic"/><!--OK-->
  <rule ref="rulesets/java/design.xml/CloseResource"/>
  <rule ref="rulesets/java/design.xml/NonStaticInitializer"/>
  <rule ref="rulesets/java/design.xml/DefaultLabelNotLastInSwitchStmt"/>
  <rule ref="rulesets/java/design.xml/NonCaseLabelInSwitchStatement"/>
  <rule ref="rulesets/java/design.xml/OptimizableToArrayCall"/>
  <rule ref="rulesets/java/design.xml/BadComparison"/>
  <rule ref="rulesets/java/design.xml/EqualsNull"/><!--OK-->
  <rule ref="rulesets/java/design.xml/ConfusingTernary"/><!--OK-->
  <rule ref="rulesets/java/design.xml/InstantiationToGetClass"/>
  <rule ref="rulesets/java/design.xml/IdempotentOperations"/>
  <rule ref="rulesets/java/design.xml/SimpleDateFormatNeedsLocale"/><!--OK-->
  <rule ref="rulesets/java/design.xml/ImmutableField"/><!--OK-->
  <rule ref="rulesets/java/design.xml/UseLocaleWithCaseConversions"/>
  <rule ref="rulesets/java/design.xml/AvoidProtectedFieldInFinalClass"/>
  <rule ref="rulesets/java/design.xml/AssignmentToNonFinalStatic"/><!--OK-->
  <rule ref="rulesets/java/design.xml/MissingStaticMethodInNonInstantiatableClass"/>
  <rule ref="rulesets/java/design.xml/AvoidSynchronizedAtMethodLevel"/><!--OK-->
  <rule ref="rulesets/java/design.xml/MissingBreakInSwitch"/>
  <rule ref="rulesets/java/design.xml/UseNotifyAllInsteadOfNotify"/>
  <rule ref="rulesets/java/design.xml/AvoidInstanceofChecksInCatchClause"/>
  <rule ref="rulesets/java/design.xml/AbstractClassWithoutAbstractMethod"/><!--OK-->
  <rule ref="rulesets/java/design.xml/SimplifyConditional"/>
  <rule ref="rulesets/java/design.xml/CompareObjectsWithEquals"/>
  <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInComparisons"/>
  <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInCaseInsensitiveComparisons"/>
  <rule ref="rulesets/java/design.xml/UnnecessaryLocalBeforeReturn"/>
  <rule ref="rulesets/java/design.xml/NonThreadSafeSingleton"/>
  <rule ref="rulesets/java/design.xml/SingleMethodSingleton"/>
  <rule ref="rulesets/java/design.xml/SingletonClassReturningNewInstance"/>
  <rule ref="rulesets/java/design.xml/UncommentedEmptyMethodBody"/><!--OK-->
  <rule ref="rulesets/java/design.xml/UncommentedEmptyConstructor"/>
  <rule ref="rulesets/java/design.xml/AvoidConstantsInterface"/><!--OK-->
  <rule ref="rulesets/java/design.xml/UnsynchronizedStaticDateFormatter"/>
  <rule ref="rulesets/java/design.xml/PreserveStackTrace"/>
  <rule ref="rulesets/java/design.xml/UseCollectionIsEmpty"/>
  <rule ref="rulesets/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
  <rule ref="rulesets/java/design.xml/EmptyMethodInAbstractClassShouldBeAbstract"/>
  <rule ref="rulesets/java/design.xml/SingularField"/>
  <rule ref="rulesets/java/design.xml/ReturnEmptyArrayRatherThanNull"/>
  <rule ref="rulesets/java/design.xml/AbstractClassWithoutAnyMethod"/>
  <rule ref="rulesets/java/design.xml/TooFewBranchesForASwitchStatement"/>
  <rule ref="rulesets/java/design.xml/LogicInversion"/>
  <rule ref="rulesets/java/design.xml/UseVarargs"/>
  <rule ref="rulesets/java/design.xml/FieldDeclarationsShouldBeAtStartOfClass"/><!--OK-->
  <rule ref="rulesets/java/design.xml/GodClass"/>
  <rule ref="rulesets/java/design.xml/AvoidProtectedMethodInFinalClassNotExtending"/>
  <rule ref="rulesets/java/design.xml/ConstantsInInterface"/>


  <!-- These rules deal with different optimizations that generally apply to best practices. -->
  <!--<rule ref="rulesets/java/optimizations.xml/LocalVariableCouldBeFinal"/>-->
  <!--<rule ref="rulesets/java/optimizations.xml/MethodArgumentCouldBeFinal"/>-->
  <!--<rule ref="rulesets/java/optimizations.xml/AvoidInstantiatingObjectsInLoops"/>-->
  <rule ref="rulesets/java/optimizations.xml/UseArrayListInsteadOfVector"/>
  <!--<rule ref="rulesets/java/optimizations.xml/SimplifyStartsWith"/>-->
  <!--<rule ref="rulesets/java/optimizations.xml/UseStringBufferForStringAppends"/>-->
  <rule ref="rulesets/java/optimizations.xml/UseArraysAsList"/>
  <rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops"/>
  <rule ref="rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation"/>
  <rule ref="rulesets/java/optimizations.xml/AddEmptyString"/>
  <!--<rule ref="rulesets/java/optimizations.xml/RedundantFieldInitializer"/>-->
  <rule ref="rulesets/java/optimizations.xml/PrematureDeclaration"/>


  <!-- These rules provide some strict guidelines about throwing and catching exceptions. -->
  <rule ref="rulesets/java/strictexception.xml/AvoidCatchingThrowable"/>
  <rule ref="rulesets/java/strictexception.xml/SignatureDeclareThrowsException"/>
  <rule ref="rulesets/java/strictexception.xml/ExceptionAsFlowControl"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidCatchingNPE"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidThrowingRawExceptionTypes"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNullPointerException"/>
  <!--<rule ref="rulesets/java/strictexception.xml/AvoidRethrowingException"/>-->
  <rule ref="rulesets/java/strictexception.xml/DoNotExtendJavaLangError"/>
  <rule ref="rulesets/java/strictexception.xml/DoNotThrowExceptionInFinally"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNewInstanceOfSameException"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidCatchingGenericException"/>
  <rule ref="rulesets/java/strictexception.xml/AvoidLosingExceptionInformation"/>


  <!-- The Unused Code ruleset contains rules that find unused or ineffective code. -->
  <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateField"/>
  <rule ref="rulesets/java/unusedcode.xml/UnusedLocalVariable"/>
  <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateMethod"/>
  <rule ref="rulesets/java/unusedcode.xml/UnusedFormalParameter"/>
  <rule ref="rulesets/java/unusedcode.xml/UnusedModifier"/>


  <!--The Unnecessary Ruleset contains a collection of rules for unnecessary code. -->
  <rule ref="rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary"/>
  <rule ref="rulesets/java/unnecessary.xml/UnnecessaryReturn"/>
  <rule ref="rulesets/java/unnecessary.xml/UnnecessaryFinalModifier"/>
  <rule ref="rulesets/java/unnecessary.xml/UselessOverridingMethod"/>
  <rule ref="rulesets/java/unnecessary.xml/UselessOperationOnImmutable"/>
  <rule ref="rulesets/java/unnecessary.xml/UnusedNullCheckInEquals"/>
  <rule ref="rulesets/java/unnecessary.xml/UselessParentheses"/>
  <rule ref="rulesets/java/unnecessary.xml/UselessQualifiedThis"/>


  <!-- The Java Logging ruleset contains a collection of rules that find questionable usages of the logger. -->
  <rule ref="rulesets/java/logging-java.xml/MoreThanOneLogger"/>
  <!--<rule ref="rulesets/java/logging-java.xml/LoggerIsNotStaticFinal"/>-->
  <rule ref="rulesets/java/logging-java.xml/SystemPrintln"/>
  <rule ref="rulesets/java/logging-java.xml/AvoidPrintStackTrace"/>
  <rule ref="rulesets/java/logging-java.xml/GuardLogStatementJavaUtil"/>
  <rule ref="rulesets/java/logging-java.xml/InvalidSlf4jMessageFormat"/>


  <!-- The JavaBeans Ruleset catches instances of bean rules not being followed. -->
  <!--<rule ref="rulesets/java/javabeans.xml/BeanMembersShouldSerialize"/>-->
  <rule ref="rulesets/java/javabeans.xml/MissingSerialVersionUID"/>


  <!-- The Braces ruleset contains rules regarding the use and placement of braces. -->
  <rule ref="rulesets/java/braces.xml/IfStmtsMustUseBraces"/>
  <rule ref="rulesets/java/braces.xml/WhileLoopsMustUseBraces"/>
  <rule ref="rulesets/java/braces.xml/IfElseStmtsMustUseBraces"/>
  <rule ref="rulesets/java/braces.xml/ForLoopsMustUseBraces"/>


  <!-- These rules check the security guidelines from Sun,
  published at http://java.sun.com/security/seccodeguide.html#gcg-->
  <rule ref="rulesets/java/sunsecure.xml/MethodReturnsInternalArray"/>
  <rule ref="rulesets/java/sunsecure.xml/ArrayIsStoredDirectly"/>


  <!-- These are rules which resolve java Class files for comparison, as opposed to a String -->
  <rule ref="rulesets/java/typeresolution.xml/LooseCoupling"/>
  <rule ref="rulesets/java/typeresolution.xml/CloneMethodMustImplementCloneable"/>
  <rule ref="rulesets/java/typeresolution.xml/UnusedImports"/>
  <rule ref="rulesets/java/typeresolution.xml/SignatureDeclareThrowsException"/>


  <!-- These rules deal with different problems that can occur with finalizers. -->
  <rule ref="rulesets/java/finalizers.xml/EmptyFinalizer"/>
  <rule ref="rulesets/java/finalizers.xml/FinalizeOnlyCallsSuperFinalize"/>
  <rule ref="rulesets/java/finalizers.xml/FinalizeOverloaded"/>
  <rule ref="rulesets/java/finalizers.xml/FinalizeDoesNotCallSuperFinalize"/>
  <rule ref="rulesets/java/finalizers.xml/FinalizeShouldBeProtected"/>
  <rule ref="rulesets/java/finalizers.xml/AvoidCallingFinalize"/>


  <!-- Rules intended to catch errors related to code comments -->
  <!--<rule ref="rulesets/java/comments.xml/CommentRequired"/>-->
  <!--<rule ref="rulesets/java/comments.xml/CommentSize"/>-->
  <!--<rule ref="rulesets/java/comments.xml/CommentContent"/>-->
  <!--<rule ref="rulesets/java/comments.xml/CommentDefaultAccessModifier"/>-->

  <!-- Disable -->
  <!--<rule ref="rulesets/java/android.xml/"/>-->
  <!--<rule ref="rulesets/java/clone.xml/"/>-->
  <!--<rule ref="rulesets/java/codesize.xml/"/>-->
  <!--<rule ref="rulesets/java/comments.xml/"/>-->
  <!--<rule ref="rulesets/java/coupling.xml/"/>-->
  <!--<rule ref="rulesets/java/j2ee.xml/"/>-->
  <!--<rule ref="rulesets/java/junit.xml/"/>-->
  <!--<rule ref="rulesets/java/logging-jakarta-commons.xml/"/>-->
  <!--<rule ref="rulesets/java/migrating.xml/"/>-->
  <!--<rule ref="rulesets/java/migrating_to_13.xml/"/>-->
  <!--<rule ref="rulesets/java/migrating_to_14.xml/"/>-->
  <!--<rule ref="rulesets/java/migrating_to_15.xml/"/>-->
  <!--<rule ref="rulesets/java/migrating_to_junit4.xml/"/>-->

</ruleset>
